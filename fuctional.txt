from flask import Flask as fk, render_template as rt, request as rq
from flask_socketio import SocketIO
import threading as threating
from time import strftime, sleep
import paho.mqtt.client as mqtt
import time
import json

app = fk(__name__)
socketio = SocketIO(app)

# Configuración MQTT
MQTT_BROKER = "tu_broker_mqtt"
MQTT_PORT = 1883
MQTT_TOPIC = "sensores/datos"

mqtt_data_available = False
mqtt_temperature = None
mqtt_humidity = None

def on_connect(client, userdata, flags, rc):
    client.subscribe(MQTT_TOPIC)

def on_message(client, userdata, msg):
    global mqtt_data_available, mqtt_temperature, mqtt_humidity
    try:
        payload = json.loads(msg.payload.decode('utf-8'))
        mqtt_temperature = payload.get("temperatura")
        mqtt_humidity = payload.get("humedad")

        if mqtt_temperature is not None and mqtt_humidity is not None:
            mqtt_data_available = True
        else:
            socketio.emit('sensor_error', {'message': "Datos MQTT incompletos o incorrectos."})

    except json.JSONDecodeError:
        socketio.emit('sensor_error', {'message': "Error: Payload MQTT no es un JSON válido"})
    except Exception as e:
        socketio.emit('sensor_error', {'message': f"Error al procesar mensaje MQTT: {e}"})

def mqtt_client_setup():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_start()
    return client

mqtt_client = mqtt_client_setup()
    
@app.route('/')
def index():
    return rt('index.html')

@app.route('/iraprueba')
def prueba():
    return rt('prueba.html')

def generate_data():
    global mqtt_data_available, mqtt_temperature, mqtt_humidity
    while True:
        if mqtt_data_available:
            socketio.emit('t_new_data', {'value': mqtt_temperature})
            socketio.emit('h_new_data', {'value': mqtt_humidity})
            mqtt_data_available = False
        else:
            socketio.emit('sensor_error', {'message': "No hay datos MQTT disponibles."})
        sleep(5)

if __name__ == '__main__':
    thread = threating.Thread(target=generate_data)
    thread.daemon = True
    thread.start()
    socketio.run(app, host="0.0.0.0", port=5001, debug=True, allow_unsafe_werkzeug=True)